//
// \file: dissectPackets.c
// 
// Reads in a binary file containing packets and reads them 
// in byte by byte. Reads each packet in and chops it into
// its individual components for formatted printing.
// 
// @author: Jacob R Hooker - jrh7130
//
// /// // /// // /// // /// // /// // /// // /// // /// // /// // ///

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <byteswap.h>

size_t BUFFER_SIZE = 2048;
FILE *file;

//
// \fn main
// \brief The main function
//
// Reads and dissects a binary file of packets
//
//
int main(int argc, char **argv){
	unsigned char buffer[BUFFER_SIZE];
		
	if(argc <= 1 || argc > 2){
		printf("Usage: dissectPackets <binary file>\n");
		exit(EXIT_FAILURE);
	}
	//number of packets in file
	int numPackets;
	
	//the binary file being read
	file = fopen(argv[1], "rb");
	
	//fails if no file found
	if(file == NULL || 0){
		fprintf(stderr, 
		"Failed to open input file: No such file or directory.");	
		return 1;
	}

	fread(&numPackets, sizeof(int), 1, file);
	
	//fails if file has no packets
	if(numPackets == 0 || numPackets > 30000){
		fprintf(stderr, "Failed to read count of packets.");
		return 1;
	}
	printf("==== File %s contains %d Packets\n", argv[1], numPackets); 
	
	//read each packet individually
	for(int i = 1; i <= numPackets; i++){
		unsigned int packetLn;
		fread(&packetLn, sizeof(int), 1, file);
		printf("==>Packet %d\n", i);
		fread(buffer, sizeof(char), packetLn, file);
		unsigned char vers = buffer[0] >> 4;
		unsigned char ihl = buffer[0] & 0x0F;
		unsigned char length = buffer[2] + buffer[3];
		unsigned short id = buffer[4] + buffer[5];
		unsigned char flags = buffer[6];
		unsigned char frag = (buffer[6] << 3) + buffer[7];
		unsigned char ttl = buffer[8];
		unsigned char prot = buffer[9];
		unsigned short chksum = buffer[10] + buffer[11];
		printf("Version:\t\t%#hhx (%d)\n", vers, vers);
		printf("IHL (Header Length):\t\t%#hhx (%d)\n", ihl, ihl);
		if(buffer[1] == 0){
			printf("Type of Service (TOS):\t\t0x%#hhx (%d)\n",
				 buffer[1], buffer[1]);
		}
		if(buffer[1] != 0){
			printf("Type of Service (TOS):\t\t%#hhx (%d)\n",
				 buffer[1], buffer[1]);
		}
		printf("Total Length:\t\t0x%X (%d)\n", length, length);
		if(id == 0){
			printf("Identification:\t\t0x%X (%hu)\n", id, id);
		}
		if(id != 0){
			printf("Identification:\t\t0x%X (%hu)\n", id, id);
		}
		if(flags == 0){
			printf("IP Flags:\t\t0x%#hhx (%d)\n", flags, flags);
		}
		if(flags != 0){
			printf("IP Flags:\t\t%#hhx (%d)\n", flags, flags);
		}
		if(frag == 0){
			printf("Fragment Offset:\t\t0x%#hhx (%d)\n", frag, frag);
		}
		if(frag != 0){
			printf("Fragment Offset:\t\t%#hhx (%d)\n", frag, frag);
		}
		printf("Time To Live (TTL):\t\t0x%X (%d)\n", ttl, ttl);
		if(prot == 1){
			printf("Protocol:\t\tICMP %#hhx (%d)\n", prot, prot);
		}
		if(prot == 6){
			printf("Protocol:\t\tTCP %#hhx (%d)\n", prot, prot);

		}
		printf("Header Checksum:\t\t0x%X (%hu)\n", chksum, chksum);
		printf("Source Address:\t\t%d.%d.%d.%d\n", buffer[12],
				buffer[13],buffer[14],buffer[15]);
		printf("Destination Address:\t\t%d.%d.%d.%d\n", buffer[16],
				buffer[17],buffer[18],buffer[19]);
	}
	fclose(file);

	return 0;
}
